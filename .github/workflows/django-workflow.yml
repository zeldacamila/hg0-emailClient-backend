name: Django CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          cd backend
          python manage.py test

  build-and-push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/django-ci-cd-pipeline:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -l ubuntu  ec2-54-204-113-27.compute-1.amazonaws.com <<EOF

          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/django-ci-cd-pipeline:latest

          ./detener_contenedor_backend.sh
          sudo docker run --rm \
            -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            -e DEBUG="${{ secrets.DEBUG }}" \
            -e DB_NAME="${{ secrets.DB_NAME }}" \
            -e DB_USER="${{ secrets.DB_USER }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e DB_HOST="${{ secrets.DB_HOST }}" \
            -e DB_PORT="${{ secrets.DB_PORT }}" \
            -e ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" \
            ${{ secrets.DOCKER_USERNAME }}/django-ci-cd-pipeline:latest \
            python manage.py migrate
          sudo docker rm -f backendContainer || true
          sudo docker run -d -p 8000:8000 --name backendContainer \
            -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            -e DEBUG="${{ secrets.DEBUG }}" \
            -e DB_NAME="${{ secrets.DB_NAME }}" \
            -e DB_USER="${{ secrets.DB_USER }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e DB_HOST="${{ secrets.DB_HOST }}" \
            -e DB_PORT="${{ secrets.DB_PORT }}" \
            -e ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" \
            ${{ secrets.DOCKER_USERNAME }}/django-ci-cd-pipeline:latest

            sudo docker container prune -f
            sudo docker image prune -a -f
          EOF
